User Management API

user centric routes

-> signup
-> login routes
-> forgot password
-> profile
-> list all users



RESTful API
-> Stateless - efficient and fast -> 
    something that does not have a fixed state
        -> signup -> user information
        ALL THE INFORMATION that is required to fulfill or respond to a request
        should be provided by the user in the request 



        user-> signup, country code server saved -> other country

-> error handled -> try{}catch(err){}

-> data validation -> to prevent submission of wrong information by the user 
                        and to avoid data overlapping 
    (mongoose)

-> mongoDB database 

-> asynchronous in nature 

MongoDB database is schemaless 

we need to set up a schema for user information ->

Data modelling

-> it makes our service efficient ->these details should be validated or cross checked
 email, phone, age, address, pin code, role
-> it avoids invalid data 
-> data becomes useful -> we can generate predictive insights from the data  
-> it helps in security -> signup -> email and password -> forgot password 

Role Based Authentication

ecommerce app -> admin, user 
functionalities -> only admin 

/login -> email, password-> email -> if admin -> then provide the features 
otherwise no features


Error Handling

-> used to prevent crashing of the server when an error occurs
-> lets the client know what is wrong with their input


captcha -> package -> div -> validate X -> validate true 



Aggregation and pipelines

one purpose per route 

Aggregation and pipelines



deeper and more complex insights into my data i will use aggregation and pipelines

Aggregation pipelines -> when we have to implement more than one logic to the data
in order to extract something that DEPENDS on the data but is NOT exactly in the same format
as the data 



//for getting some information -> 


//i want to count adults in my database
//role: user, age: group -> count 
app.get("/count", async (req, res)=>{
    try{
        const count = await User.findandelete
    }
})

//count young people in a city using my website

//males and females 

//active users

//product popularity



complete aggregation pipelines

task manager api




name, age, email, role, city, country, password, phone, isActive -> user.login <30days 

10000 -> international users 
-> sales team -> countries 

-> users in my service are from different countries 

- find active users -> isActive:true,done
- group the users based on countries and write their count ->{ country, count } 
- sort based on count in descending order 
- country, userCount 

app.get("/country", async (req, res)=>{
    try{
        const countbycountry = await User.aggregate(
            //array
            [
                //of objects
                {
                    $match:{
                        isActive:true,
                        role:'user',
                        age:{$gt:18}
                    }
                },
                {
                    //create groups of data 
                    $group:{
                        _id: "$country",
                        userCount:{$sum:1}

                    }
                },
                {
                    $sort:{
                        userCount:-1,
                    }
                },
                {
                    $project:{
                        country:"$_id",
                        userCount:1,
                        _id:0 
                    }
                }
            ]
        )

    }
    catch(err){

    }
})



[
{
    country: india,
    userCount : number

},
{
    country:australia,
    userCount:number
}
]



Task Management Features for our usermanagement API

create task model -> title, description, status, assignedUser, timestamp, id 



Routes-> create a task, update the task, delete task, fetch tasks 

user-task relationship 

implement the functionality of updating the task 
